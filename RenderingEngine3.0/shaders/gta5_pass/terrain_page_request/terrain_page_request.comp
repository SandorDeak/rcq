#version 450
#extension GL_ARB_separate_shader_objects : enable

const uint REQUEST_TYPE_DECREASE_MIN_MIP_LEVEL=1<<31; //otherwise increase
const uint MAX_REQUEST_COUNT=256;
const uint MAX_TILE_COUNT=128;
const uint MAX_TILE_COUNT_LOG2=7;

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

layout(set=0, binding=0) uniform terrain_tile_request_data
{
	vec3 view_pos;
	float near;
	float far;
} data;

layout(set=1, binding=0) buffer terrain_buffer
{
	vec2 tile_size_in_meter;
	float mip_level_count;
	uint request_count;
	uint requests[MAX_REQUEST_COUNT];
	
} terr;

layout(set=1, binding=1, r32f) uniform imageBuffer requested_mip_levels;


void main()
{
	int tile_index=int(gl_GlobalInvocationID.x+gl_GlobalInvocationID.y*gl_WorkGroupSize.x*gl_NumWorkGroups.x);

	vec2 tile_center=(vec2(gl_GlobalInvocationID.xy)+0.5f)*terr.tile_size_in_meter;
	float d=distance(tile_center, data.view_pos.xz);
	float current_level=imageLoad(requested_mip_levels, tile_index).x;
	float required_level=terr.mip_level_count*(d-data.near)/(data.far-data.near);
	//required_level=min(required_level, terr.mip_level_count-1);
	
	float tolerance=0.5f;
	
	if (current_level<required_level-tolerance && current_level<terr.mip_level_count-1.f)
	{
		uint request_index=atomicAdd(terr.request_count, 1);
		if (request_index>=MAX_REQUEST_COUNT)
		{
			atomicAdd(terr.request_count, -1);
			return;
		}
		uint request=gl_GlobalInvocationID.x | (gl_GlobalInvocationID.y<<MAX_TILE_COUNT_LOG2);
		terr.requests[request_index]=request;
		imageStore(requested_mip_levels, tile_index, vec4(current_level+1.f));
	}
	else if (current_level>required_level+tolerance && current_level>0.f)
	{
		uint request_index=atomicAdd(terr.request_count, 1);
		if (request_index>=MAX_REQUEST_COUNT)
		{
			atomicAdd(terr.request_count, -1);
			return;
		}
		uint request=gl_GlobalInvocationID.x | (gl_GlobalInvocationID.y<<MAX_TILE_COUNT_LOG2) | REQUEST_TYPE_DECREASE_MIN_MIP_LEVEL;
		imageStore(requested_mip_levels, tile_index, vec4(current_level-1.f));
		terr.requests[request_index]=request;
	}
}
